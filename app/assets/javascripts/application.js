// Generated by CoffeeScript 1.12.6
(function() {
  var archivist;

  archivist = angular.module('archivist', ['templates', 'ngRoute', 'ui.bootstrap', 'ui.sortable', 'ui.tree', 'googlechart', 'treeControl', 'bsLoadingOverlay', 'bsLoadingOverlaySpinJs', 'archivist.flash', 'archivist.instruments', 'archivist.datasets', 'archivist.mapping', 'archivist.build', 'archivist.summary', 'archivist.topics', 'archivist.admin', 'archivist.realtime', 'archivist.users', 'archivist.data_manager']);

  archivist.config([
    '$routeProvider', '$locationProvider', function($routeProvider, $locationProvider) {
      $routeProvider.when('/', {
        templateUrl: 'index.html',
        controller: 'HomeController'
      });
      return $locationProvider.html5Mode(true);
    }
  ]);

  archivist.controller('RootController', [
    '$scope', '$location', 'DataManager', 'User', function($scope, $location, DataManager, User) {
      $scope.softwareName = 'Archivist';
      $scope.softwareVersion = window.app_version;
      if ($scope.page == null) {
        $scope.page = {};
      }
      $scope.page['title'] = 'Home';
      $scope.isActive = function(viewLocation) {
        return viewLocation === $location.path();
      };
      $scope.user = new User(window.current_user_email);
      if ($scope.user.email.length > 0) {
        $scope.user.sign_in();
      }
      $scope.is_admin = function() {
        return $scope.user.is_admin();
      };
      $scope.is_editor = function() {
        return $scope.user.is_editor();
      };
      return $scope.sign_out = function() {
        return $scope.user.sign_out()["finally"](function() {
          return DataManager.clearCache();
        });
      };
    }
  ]);

  archivist.controller('HomeController', [
    '$scope', 'DataManager', function($scope, DataManager) {
      $scope.chart_one = {};
      $scope.chart_two = {};
      $scope.chart_three = {};
      $scope.chart_four = {};
      $scope.chart_one.type = $scope.chart_three.type = $scope.chart_four.type = "ColumnChart";
      $scope.chart_two.type = "Histogram";
      $scope.instruments = DataManager.getInstruments({}, function(res) {
        var data, i, j, len, s;
        $scope.chart_one.data = {
          cols: [
            {
              id: "s",
              label: "Study",
              type: "string"
            }, {
              id: "i",
              label: "Instruments",
              type: "number"
            }
          ]
        };
        $scope.chart_two.data = [['Instrument', 'Control Constructs']];
        $scope.chart_three.data = {
          cols: [
            {
              id: "s",
              label: "Study",
              type: "string"
            }, {
              id: "s",
              label: "Avg. Constructs Per Instrument",
              type: "number"
            }
          ]
        };
        $scope.chart_one.data['rows'] = [];
        $scope.chart_three.data['rows'] = [];
        data = {};
        for (j = 0, len = res.length; j < len; j++) {
          i = res[j];
          if (i.study in data) {
            data[i.study]['instruments'] += 1;
            data[i.study]['ccs'] += i.ccs;
          } else {
            data[i.study] = {
              'instruments': 1,
              'ccs': i.ccs
            };
          }
          $scope.chart_two.data.push([i.title, i.ccs]);
        }
        data.sort();
        for (s in data) {
          $scope.chart_one.data['rows'].push({
            c: [
              {
                v: s
              }, {
                v: data[s]['instruments']
              }
            ]
          });
          $scope.chart_three.data['rows'].push({
            c: [
              {
                v: s
              }, {
                v: data[s]['ccs'] / data[s]['instruments']
              }
            ]
          });
        }
        return $scope.studies = Object.keys(data);
      });
      $scope.datasets = DataManager.getDatasets();
      console.log($scope);
      $scope.chart_one.options = {
        'title': 'Instruments',
        'legend': {
          'position': 'none'
        },
        'colors': ['#652C90']
      };
      $scope.chart_two.options = {
        'title': 'Control Construct Distribution',
        'legend': {
          'position': 'none'
        },
        'colors': ['#FBAF3F']
      };
      return $scope.chart_three.options = {
        'title': 'Avg. Constructs per Instrument',
        'legend': {
          'position': 'none'
        },
        'colors': ['#00ADEF']
      };
    }
  ]);

  archivist.directive('notices', function() {
    return {
      templateUrl: 'partials/notices.html'
    };
  });

  archivist.directive('breadcrumb', function() {
    return {
      templateUrl: 'partials/breadcrumb.html'
    };
  });

  archivist.directive('ngFileModel', [
    '$parse', function($parse) {
      return {
        restrict: 'A',
        link: function(scope, element, attrs) {
          var isMultiple, model, modelSetter;
          model = $parse(attrs.ngFileModel);
          isMultiple = attrs.multiple;
          modelSetter = model.assign;
          return element.bind('change', function() {
            var values;
            values = [];
            angular.forEach(element[0].files, function(item) {
              return values.push(item);
            });
            return scope.$apply(function() {
              if (isMultiple) {
                return modelSetter(scope, values);
              } else {
                return modelSetter(scope, values[0]);
              }
            });
          });
        }
      };
    }
  ]);

  archivist.run([
    '$rootScope', 'Flash', 'RealTimeConnection', 'bsLoadingOverlayService', function($rootScope, Flash, RealTimeConnection, bsLoadingOverlayService) {
      bsLoadingOverlayService.setGlobalConfig({
        templateUrl: 'bsLoadingOverlaySpinJs',
        activeClass: 'loading'
      });
      Array.prototype.unique = function() {
        var j, key, output, ref1, results, value;
        output = {};
        for (key = j = 0, ref1 = this.length; 0 <= ref1 ? j < ref1 : j > ref1; key = 0 <= ref1 ? ++j : --j) {
          output[this[key]] = this[key];
        }
        results = [];
        for (key in output) {
          value = output[key];
          results.push(value);
        }
        return results;
      };
      Array.prototype.select_resource_by_id = function(ref_id) {
        var key;
        return ((function() {
          var j, ref1, results;
          results = [];
          for (key = j = 0, ref1 = this.length; 0 <= ref1 ? j < ref1 : j > ref1; key = 0 <= ref1 ? ++j : --j) {
            if (this[key].id === ref_id) {
              results.push(this[key]);
            }
          }
          return results;
        }).call(this))[0];
      };
      Array.prototype.get_index_by_id = function(ref_id) {
        var key;
        return ((function() {
          var j, ref1, results;
          results = [];
          for (key = j = 0, ref1 = this.length; 0 <= ref1 ? j < ref1 : j > ref1; key = 0 <= ref1 ? ++j : --j) {
            if (this[key].id === ref_id) {
              results.push(key);
            }
          }
          return results;
        }).call(this))[0];
      };
      Array.prototype.select_resource_by_id_and_type = function(ref_id, ref_type) {
        var key;
        return ((function() {
          var j, ref1, results;
          results = [];
          for (key = j = 0, ref1 = this.length; 0 <= ref1 ? j < ref1 : j > ref1; key = 0 <= ref1 ? ++j : --j) {
            if (this[key].id === ref_id && this[key].type === ref_type) {
              results.push(this[key]);
            }
          }
          return results;
        }).call(this))[0];
      };
      Array.prototype.get_index_by_id_and_type = function(ref_id, ref_type) {
        var key;
        return ((function() {
          var j, ref1, results;
          results = [];
          for (key = j = 0, ref1 = this.length; 0 <= ref1 ? j < ref1 : j > ref1; key = 0 <= ref1 ? ++j : --j) {
            if (this[key].id === ref_id && this[key].type === ref_type) {
              results.push(key);
            }
          }
          return results;
        }).call(this))[0];
      };
      Array.prototype.clean = function() {
        var j, len, ref1, results, val;
        ref1 = this;
        results = [];
        for (j = 0, len = ref1.length; j < len; j++) {
          val = ref1[j];
          if ((val != null) && val !== '') {
            results.push(val);
          }
        }
        return results;
      };
      Array.prototype.label_sort = function() {
        var sorter;
        sorter = function(a, b) {
          var a_pieces, b_pieces, i, j, limit, re, ref1;
          re = /([^-^_\d]+)|([^-^_\D]+)/;
          a_pieces = a.split(re).clean();
          b_pieces = b.split(re).clean();
          limit = a_pieces.length > b_pieces.length ? b_pieces.length : a_pieces.length;
          for (i = j = 0, ref1 = limit; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
            if (!isNaN(a_pieces[i])) {
              a_pieces[i] = parseInt(a_pieces[i]);
            }
            if (!isNaN(b_pieces[i])) {
              b_pieces[i] = parseInt(b_pieces[i]);
            }
            if (a_pieces[i] === b_pieces[i]) {
              continue;
            }
            if (a_pieces[i] > b_pieces[i]) {
              return 1;
            } else {
              return -1;
            }
          }
          if (a_pieces.length > b_pieces.length) {
            return 1;
          }
          if (a_pieces.length < b_pieces.length) {
            return -1;
          }
          return 0;
        };
        return this.concat().sort(sorter);
      };
      Array.prototype.sort_by_property = function(prop) {
        var sorter;
        if (prop == null) {
          prop = 'label';
        }
        sorter = function(a, b) {
          var a_pieces, b_pieces, i, j, limit, re, ref1;
          re = /([^-^_\d]+)|([^-^_\D]+)/;
          a_pieces = a[prop].split(re).clean();
          b_pieces = b[prop].split(re).clean();
          limit = a_pieces.length > b_pieces.length ? b_pieces.length : a_pieces.length;
          for (i = j = 0, ref1 = limit; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
            if (!isNaN(a_pieces[i])) {
              a_pieces[i] = parseInt(a_pieces[i]);
            }
            if (!isNaN(b_pieces[i])) {
              b_pieces[i] = parseInt(b_pieces[i]);
            }
            if (a_pieces[i] === b_pieces[i]) {
              continue;
            }
            if (a_pieces[i] > b_pieces[i]) {
              return 1;
            } else {
              return -1;
            }
          }
          if (a_pieces.length > b_pieces.length) {
            return 1;
          }
          if (a_pieces.length < b_pieces.length) {
            return -1;
          }
          return 0;
        };
        return this.concat().sort(sorter);
      };
      Object.lower_everything = function(obj) {
        var k, target;
        target = {};
        for (k in obj) {
          if (obj.hasOwnProperty(k)) {
            if (typeof k === "string") {
              target[k.toLowerCase()] = typeof obj[k] === 'string' ? obj[k].toLowerCase() : obj[k];
            } else {
              target[k] = typeof obj[k] === 'string' ? obj[k].toLowerCase() : obj[k];
            }
          }
        }
        return target;
      };
      Object.prototype.sort = function() {
        var newObj;
        newObj = {};
        Object.keys(this).sort().forEach(function(v) {
          return newObj[v] = this[v];
        });
        return newObj;
      };
      String.prototype.replaceAll = function(search, replacement) {
        var target;
        target = this;
        return target.replace(new RegExp(search, 'g'), replacement);
      };
      String.prototype.pascal_case_to_underscore = function() {
        var target;
        target = this;
        return target.replace(/([A-Z])/g, function(x, y) {
          return "_" + y.toLowerCase();
        }).replace(/^_/, '');
      };
      String.prototype.underscore_to_pascal_case = function() {
        var target;
        target = this.capitalizeFirstLetter();
        return target.replace(/_(.)/g, function(x, y) {
          return y.toUpperCase();
        });
      };
      String.prototype.capitalizeFirstLetter = function() {
        var target;
        target = this;
        return target.charAt(0).toUpperCase() + target.slice(1);
      };
      Flash.set_scope($rootScope);
      $rootScope.publish_flash = function() {
        return Flash.publish($rootScope);
      };
      $rootScope.$on('$routeChangeSuccess', function() {
        return $rootScope.publish_flash();
      });
      $rootScope.publish_flash();
      $rootScope.page = {
        title: 'Home'
      };
      $rootScope.realtimeStatus = false;
      return $rootScope.range = function(i) {
        var j, num, ref1, results;
        results = [];
        for (num = j = 1, ref1 = i; 1 <= ref1 ? j <= ref1 : j >= ref1; num = 1 <= ref1 ? ++j : --j) {
          results.push(num);
        }
        return results;
      };
    }
  ]);

  archivist.filter('capitalize', function() {
    return function(input) {
      if (!!input) {
        return input.charAt(0).toUpperCase() + input.substr(1).toLowerCase();
      } else {
        return '';
      }
    };
  });

  archivist.filter('prettytype', function() {
    var ref;
    ref = {
      'ResponseDomainCode': 'Code',
      'ResponseDomainDatetime': 'Datetime',
      'ResponseDomainNumeric': 'Numeric',
      'ResponseDomainText': 'Text',
      'Category': 'Category',
      'Categories': 'Categories',
      'CodeList': 'Code List',
      'QuestionGrid': 'Grid',
      'QuestionItem': 'Item'
    };
    return function(input) {
      var plural;
      if (input.charAt(input.length - 1) === 's') {
        plural = true;
        input = input.slice(0, -1);
      } else {
        plural = false;
      }
      if (plural) {
        return ref[input] + 's';
      } else {
        return ref[input];
      }
    };
  });

  archivist.directive('convertToNumber', function() {
    return {
      require: 'ngModel',
      link: function(scope, element, attrs, ngModel) {
        ngModel.$parsers.push(function(val) {
          return parseInt(val, 10);
        });
        ngModel.$formatters.push(function(val) {
          return '' + val;
        });
      }
    };
  });

}).call(this);
