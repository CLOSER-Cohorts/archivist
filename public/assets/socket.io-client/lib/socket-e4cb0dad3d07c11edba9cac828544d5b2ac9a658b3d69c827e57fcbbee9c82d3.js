function Socket(t,e,s){this.io=t,this.nsp=e,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},s&&s.query&&(this.query=s.query),this.io.autoConnect&&this.open()}var parser=require("socket.io-parser"),Emitter=require("component-emitter"),toArray=require("to-array"),on=require("./on"),bind=require("component-bind"),debug=require("debug")("socket.io-client:socket"),parseqs=require("parseqs"),hasBin=require("has-binary2");module.exports=exports=Socket;var events={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},emit=Emitter.prototype.emit;Emitter(Socket.prototype),Socket.prototype.subEvents=function(){if(!this.subs){var t=this.io;this.subs=[on(t,"open",bind(this,"onopen")),on(t,"packet",bind(this,"onpacket")),on(t,"close",bind(this,"onclose"))]}},Socket.prototype.open=Socket.prototype.connect=function(){return this.connected?this:(this.subEvents(),this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting"),this)},Socket.prototype.send=function(){var t=toArray(arguments);return t.unshift("message"),this.emit.apply(this,t),this},Socket.prototype.emit=function(t){if(events.hasOwnProperty(t))return emit.apply(this,arguments),this;var e=toArray(arguments),s={type:(this.flags.binary!==undefined?this.flags.binary:hasBin(e))?parser.BINARY_EVENT:parser.EVENT,data:e,options:{}};return s.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof e[e.length-1]&&(debug("emitting packet with ack id %d",this.ids),this.acks[this.ids]=e.pop(),s.id=this.ids++),this.connected?this.packet(s):this.sendBuffer.push(s),this.flags={},this},Socket.prototype.packet=function(t){t.nsp=this.nsp,this.io.packet(t)},Socket.prototype.onopen=function(){if(debug("transport is open - connecting"),"/"!==this.nsp)if(this.query){var t="object"==typeof this.query?parseqs.encode(this.query):this.query;debug("sending connect packet with query %s",t),this.packet({type:parser.CONNECT,query:t})}else this.packet({type:parser.CONNECT})},Socket.prototype.onclose=function(t){debug("close (%s)",t),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",t)},Socket.prototype.onpacket=function(t){var e=t.nsp===this.nsp,s=t.type===parser.ERROR&&"/"===t.nsp;if(e||s)switch(t.type){case parser.CONNECT:this.onconnect();break;case parser.EVENT:case parser.BINARY_EVENT:this.onevent(t);break;case parser.ACK:case parser.BINARY_ACK:this.onack(t);break;case parser.DISCONNECT:this.ondisconnect();break;case parser.ERROR:this.emit("error",t.data)}},Socket.prototype.onevent=function(t){var e=t.data||[];debug("emitting event %j",e),null!=t.id&&(debug("attaching ack callback to event"),e.push(this.ack(t.id))),this.connected?emit.apply(this,e):this.receiveBuffer.push(e)},Socket.prototype.ack=function(t){var e=this,s=!1;return function(){if(!s){s=!0;var i=toArray(arguments);debug("sending ack %j",i),e.packet({type:hasBin(i)?parser.BINARY_ACK:parser.ACK,id:t,data:i})}}},Socket.prototype.onack=function(t){var e=this.acks[t.id];"function"==typeof e?(debug("calling ack %s with %j",t.id,t.data),e.apply(this,t.data),delete this.acks[t.id]):debug("bad ack %s",t.id)},Socket.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},Socket.prototype.emitBuffered=function(){var t;for(t=0;t<this.receiveBuffer.length;t++)emit.apply(this,this.receiveBuffer[t]);for(this.receiveBuffer=[],t=0;t<this.sendBuffer.length;t++)this.packet(this.sendBuffer[t]);this.sendBuffer=[]},Socket.prototype.ondisconnect=function(){debug("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},Socket.prototype.destroy=function(){if(this.subs){for(var t=0;t<this.subs.length;t++)this.subs[t].destroy();this.subs=null}this.io.destroy(this)},Socket.prototype.close=Socket.prototype.disconnect=function(){return this.connected&&(debug("performing disconnect (%s)",this.nsp),this.packet({type:parser.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},Socket.prototype.compress=function(t){return this.flags.compress=t,this},Socket.prototype.binary=function(t){return this.flags.binary=t,this};