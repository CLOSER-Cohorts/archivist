var expect=require("expect.js"),io=require("../");describe("socket",function(){this.timeout(7e4),it("should have an accessible socket id equal to the server-side socket id (default namespace)",function(e){var n=io({forceNew:!0});n.on("connect",function(){expect(n.id).to.be.ok(),expect(n.id).to.eql(n.io.engine.id),n.disconnect(),e()})}),it("should have an accessible socket id equal to the server-side socket id (custom namespace)",function(e){var n=io("/foo",{forceNew:!0});n.on("connect",function(){expect(n.id).to.be.ok(),expect(n.id).to.eql("/foo#"+n.io.engine.id),n.disconnect(),e()})}),it("clears socket.id upon disconnection",function(e){var n=io({forceNew:!0});n.on("connect",function(){n.on("disconnect",function(){expect(n.id).to.not.be.ok(),e()}),n.disconnect()})}),it("doesn't fire a connect_error if we force disconnect in opening state",function(e){var n=io({forceNew:!0,timeout:100});n.disconnect(),n.on("connect_error",function(){throw new Error("Unexpected")}),setTimeout(function(){e()},300)}),it("should ping and pong with latency",function(e){var n=io({forceNew:!0});n.on("connect",function(){var o;n.once("ping",function(){o=!0}),n.once("pong",function(c){expect(o).to.be(!0),expect(c).to.be.a("number"),n.disconnect(),e()})})}),it("should change socket.id upon reconnection",function(e){var n=io({forceNew:!0});n.on("connect",function(){var o=n.id;n.on("reconnect_attempt",function(){expect(n.id).to.not.be.ok()}),n.on("reconnect",function(){expect(n.id).to.not.eql(o),n.disconnect(),e()}),n.io.engine.close()})}),it("should enable compression by default",function(e){var n=io({forceNew:!0});n.on("connect",function(){n.io.engine.once("packetCreate",function(o){expect(o.options.compress).to.be(!0),n.disconnect(),e()}),n.emit("hi")})}),it("should disable compression",function(e){var n=io({forceNew:!0});n.on("connect",function(){n.io.engine.once("packetCreate",function(o){expect(o.options.compress).to.be(!1),n.disconnect(),e()}),n.compress(!1).emit("hi")})}),describe("query option",function(){it("should accept an object (default namespace)",function(e){var n=io("/",{forceNew:!0,query:{e:"f"}});n.emit("getHandshake",function(o){expect(o.query.e).to.be("f"),n.disconnect(),e()})}),it("should accept a query string (default namespace)",function(e){var n=io("/?c=d",{forceNew:!0});n.emit("getHandshake",function(o){expect(o.query.c).to.be("d"),n.disconnect(),e()})}),it("should accept an object",function(e){var n=io("/abc",{query:{a:"b"}});n.on("handshake",function(o){expect(o.query.a).to.be("b"),n.disconnect(),e()})}),it("should accept a query string",function(e){var n=io("/abc?b=c&d=e");n.on("handshake",function(o){expect(o.query.b).to.be("c"),expect(o.query.d).to.be("e"),n.disconnect(),e()})}),it("should properly encode the parameters",function(e){var n=io("/abc",{query:{"&a":"&=?a"}});n.on("handshake",function(o){expect(o.query["&a"]).to.be("&=?a"),n.disconnect(),e()})})}),it("should fire an error event on middleware failure from main namespace",function(e){var n=io("/foo",{forceNew:!0,query:{fail:!0}});n.on("error",function(o){expect(o).to.eql("Auth failed (main namespace)"),n.disconnect(),e()})}),it("should fire an error event on middleware failure from custom namespace",function(e){var n=io("/no",{forceNew:!0});n.on("error",function(o){expect(o).to.eql("Auth failed (custom namespace)"),n.disconnect(),e()})})});